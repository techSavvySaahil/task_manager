{"version":3,"sources":["config/API.js","components/task.js","components/board.js","App.js","serviceWorker.js","index.js"],"names":["Config","API_key","Task","connectDragSource","this","props","react_default","a","createElement","className","task","fields","customer_name","customer_contact_no","agent_name","React","Component","DragSource","beginDrag","monitor","component","comp","id","status","connect","dragSource","Board","connectDropTarget","name","Object","values","tasks","map","components_task","key","DropTarget","drop","item","getItem","updateRecord","dropTarget","isOver","isOverCurrent","shallow","canDrop","itemType","getItemType","base","Airtable","apiKey","allStatus","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","Created","Won","Lost","loading","populateRecords","setState","select","view","firstPage","err","records","alert","obj","forEach","record","assign","lastValue","newValue","arguments","length","undefined","update","defineProperty","then","catch","error","prevBoard","newBoard","_this2","board","DragDropContext","HTML5Backend","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0142fad4.chunk.js","sourcesContent":["const Config = {\r\n\tAPI_key : \"keywRQIytay1RjxbX\"\r\n}\r\n\r\nexport default Config;","import React from 'react';\r\nimport {DragSource} from 'react-dnd';\r\n\r\nconst compSource = {\r\n  beginDrag(props, monitor, component) {\r\n    // Return the data describing the dragged item\r\n    const item = { comp: \"task\", id: props.task.id, status: props.task.fields.status };\r\n    return item;\r\n  }\r\n};\r\n\r\nfunction collect(connect, monitor) {\r\n  return {\r\n    connectDragSource: connect.dragSource()\r\n  };\r\n}\r\n\r\nclass Task extends React.Component {\r\n\trender() {\r\n\t\tconst { connectDragSource } = this.props;\r\n\t\treturn connectDragSource(\r\n\t\t\t<div className=\"task\">\r\n\t\t\t\t<div className=\"text-left\">Customer: {this.props.task.fields.customer_name}</div>\r\n\t\t\t\t<div className=\"text-left\">Contact: {this.props.task.fields.customer_contact_no}</div>\r\n\t\t\t\t<br />\r\n\t\t\t\t<div className=\"text-right\">Agent: {this.props.task.fields.agent_name}</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default DragSource(\"task\", compSource, collect)(Task);","import React from 'react';\r\nimport {DropTarget} from 'react-dnd';\r\nimport Task from './task';\r\n\r\nconst dropTarg = {\r\n  drop(props, monitor, component) {\r\n    // Obtain the dragged item\r\n    const item = monitor.getItem();\r\n    // call the callback with the reqd params(ie. id, status)\r\n    props.updateRecord(item.id, item.status, props.name);\r\n  }\r\n};\r\n\r\nfunction collect(connect, monitor) {\r\n  return {\r\n    // Call this function inside render()\r\n    // to let React DnD handle the drag events:\r\n    connectDropTarget: connect.dropTarget(),\r\n    // You can ask the monitor about the current drag state:\r\n    isOver: monitor.isOver(),\r\n    isOverCurrent: monitor.isOver({ shallow: true }),\r\n    canDrop: monitor.canDrop(),\r\n    itemType: monitor.getItemType()\r\n  };\r\n}\r\n\r\nclass Board extends React.Component {\r\n\trender() {\r\n\t\tconst { connectDropTarget } = this.props;\r\n\t\treturn connectDropTarget(\r\n\t\t\t<div className=\"board\">\r\n\t\t\t\t<div className=\"board-title\">{this.props.name}</div>\r\n\t\t\t\t{Object.values(this.props.tasks).map(task=>\r\n\t\t\t\t\t<Task key={task.id} task={task} />\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default DropTarget([\"task\"], dropTarg, collect)(Board);","import React, { Component } from 'react';\nimport { DragDropContext } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport Airtable from 'airtable';\n\nimport Config from './config/API';\nimport './styles/App.css';\nimport Board from './components/board';\n\nconst base = new Airtable({apiKey: Config.API_key}).base('appS0hWdEtDwy1hCW');\n\nconst allStatus = [\"Created\", \"Won\", \"Lost\"];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Created: {},\n      Won: {},\n      Lost: {},\n      loading: false\n    }\n\n    this.populateRecords = ()=> {\n      this.setState({loading: true});\n      base('Imported table').select({\n          view: 'Grid view'\n      }).firstPage((err, records)=> {\n          if (err) {\n            alert(\"Couldn't populate records. Please reload the page.\")\n            this.setState({loading: false});\n            return;\n          }\n          let status = \"\";\n          let obj = {\n            Created: {},\n            Won: {},\n            Lost: {}\n          };\n          if(records) {\n            records.forEach((record)=> {\n                status = record.fields.status;\n                obj[status][record.id] = record;\n            });\n            this.setState({Created: Object.assign({}, obj.Created)});\n            this.setState({Won: Object.assign({}, obj.Won)});\n            this.setState({Lost: Object.assign({}, obj.Lost)});\n            this.setState({loading: false});\n          }\n        });\n    }\n    \n    this.updateRecord = (id, lastValue, newValue, key=\"status\")=> {\n      base('Imported table').update(id, {\n        [key]: newValue\n      }).then((record)=> {\n      })\n      .catch(error=> {\n        alert(\"Couldn't change the status. Please try again.\")\n      });\n\n      let prevBoard = Object.assign({}, this.state[lastValue]);\n      let newBoard = Object.assign({}, this.state[newValue]);\n\n      let task = prevBoard[id];\n      // Updating the status\n      task.fields.status = newValue;\n\n      // Adding the task to the new board\n      newBoard[id] = task;\n      this.setState({\n        [newValue]: newBoard\n      });\n\n      // let's delete it from the previous board\n      delete prevBoard[id];\n      this.setState({\n        [lastValue]: prevBoard\n      });\n    }\n  }\n\n  componentDidMount() {\n    // call AirTable API for getting tasks\n    this.populateRecords();\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <span className=\"title\">Agent Dashboard</span>\n        </header>\n\n        <div className=\"wrapper\">\n          {(this.state.loading && <div className=\"loader-wrapper\">\n            <p>Loading...</p>\n          </div>)}\n\n          {allStatus.map(status => (\n            <Board key={status} name={status} tasks={this.state[status]} updateRecord={this.updateRecord} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DragDropContext(HTML5Backend)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}